---

- name: Assertions
  ansible.builtin.assert:
    that:
      - rainloop_path is defined
      - rainloop_log is defined

- name: Load variables based on OS type
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "family-{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "family-{{ ansible_os_family }}.yml"
        - default.yml
      paths:
        - "vars"

- name: Get version
  when: rainloop_version == 'latest'
  block:

    - name: Get latest release of a public repository
      ansible.builtin.uri:
        url: "{{ rainloop_api }}"
      check_mode: no
      register: rainloop_release_latest

    - name: Register the version only
      ansible.builtin.set_fact:
        rainloop_version: "{{ rainloop_release_latest['json']['name'] | regex_replace('^v') }}"

- name: Install packages
  ansible.builtin.package:
    name: "{{ rainloop_packages }}"
    state: present

- name: Download the latest version
  ansible.builtin.get_url:
    url: "{{ rainloop_url }}"
    dest: "{{ rainloop_file }}"
    mode: "0644"
  check_mode: no
  changed_when: false

- name: Delete temporary directory
  ansible.builtin.file:
    path: "{{ rainloop_tmp }}"
    state: absent
  check_mode: no
  changed_when: false

- name: Create temporary extract directory
  ansible.builtin.file:
    path: "{{ rainloop_tmp }}"
    state: directory
    owner: "{{ rainloop_user }}"
    group: "{{ rainloop_group }}"
    mode: "0755"
  check_mode: no
  changed_when: false

- name: Extract the software
  ansible.builtin.unarchive:
    src: "{{ rainloop_file }}"
    dest: "{{ rainloop_tmp }}"
    owner: "{{ rainloop_user }}"
    group: "{{ rainloop_group }}"
    mode: "0755"
    remote_src: true
  check_mode: no
  changed_when: false

- name: Create rainloop directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ rainloop_user }}"
    group: "{{ rainloop_group }}"
    mode: "0755"
  loop:
    - "{{ rainloop_path }}"
    - "{{ rainloop_log }}"
  tags: molecule-idempotence-notest

- name: Rsync data
  ansible.posix.synchronize:
    src: "{{ rainloop_tmp }}/"
    dest: "{{ rainloop_path }}"
    rsync_opts:
      - "--omit-dir-times"
  delegate_to: "{{ inventory_hostname }}"
  notify: Restarting web service
  tags: molecule-idempotence-notest

- name: Set SELinux labels
  community.general.sefcontext:
    target: '{{ item.target }}'
    setype: '{{ item.setype }}'
    state: present
  with_items:
    - { target: '{{ rainloop_path }}(/.*)?', setype: httpd_sys_content_t }
    - { target: '{{ rainloop_path }}/data(/.*)?', setype: httpd_sys_rw_content_t }
  notify: Restarting web service
  when:
    - ansible_os_family == 'RedHat'
    - ansible_facts.selinux.status == 'enabled'

- name: Configure rainloop using apache vhost
  ansible.builtin.template:
    src: templates/apache_vhost.conf.j2
    dest: "{{ apache_conf_dir }}/{{ rainloop_vhost }}.conf"
    owner: root
    group: root
    mode: "0644"
  notify: Restarting web service
  when: rainloop_web_server == 'apache'

- name: Configure rainloop using nginx vhost
  ansible.builtin.template:
    src: templates/nginx_vhost.conf.j2
    dest: "{{ nginx_confd_path }}/{{ rainloop_vhost }}.conf"
    owner: root
    group: root
    mode: "0644"
  notify: Restarting web service
  when: rainloop_web_server == 'nginx'

- name: Check if initial config is done
  ansible.builtin.stat:
    path: "{{ rainloop_path }}/data/_data_/_default_/configs/application.ini"
  register: _app_ini

- name: Update settings
  when: _app_ini.stat.exists
  block:

    - name: Update global settings
      ansible.builtin.lineinfile:
        path: "{{ rainloop_path }}/data/_data_/_default_/configs/application.ini"
        line: >-
          {% if item.value is search('^(On|Off)$') %}
          {{ item.key }} = {{ item.value }}
          {% else %}
          {{ item.key }} = "{{ item.value }}"
          {% endif %}
        regexp: "^{{ item.key }} =.*"
      loop: "{{ rainloop_settings | dict2items }}"

    - name: Update domain settings
      ansible.builtin.template:
        src: "{{ rainloop_domain_template }}"
        dest: "{{ rainloop_path }}/data/_data_/_default_/domains/{{ item }}.ini"
        owner: "{{ rainloop_user }}"
        group: "{{ rainloop_group }}"
        mode: "0644"
      loop: "{{ rainloop_domains | default([rainloop_domain]) }}"

- name: Remove temporary directory {{ rainloop_tmp }}
  ansible.builtin.file:
    path: "{{ rainloop_tmp }}"
    state: absent
  check_mode: no
  changed_when: false

- name: Force all handlers to run now
  ansible.builtin.meta: flush_handlers
